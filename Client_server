HW
Client_Server


1) Что такое клиент-серверная архитектура

Это архитектура, в которой сетевая нагрузка распределяется между поставщиками услуг (серверами) и заказчиками (клиентами).

Клиент-серверная архитектура — это способ организации работы приложений, в котором выделяют три элемента: 
Клиент — приложение, с которым работает пользователь. Клиентов может быть много.
Сервер — система, к которой обращаются клиенты, чтобы получить данные.
Сеть — система из нескольких устройств, которая помогает клиенту и серверу обмениваться данными.
Клиент и сервер – это некое ПО. Эти программы взаимодействуют между собой через сетевые протоколы. Клиент отправляет HTTP запрос (то, что мы вводим в адресную строку) на сервер, сервер его обрабатывает и отправляет обратно НТТР ответ.

Трехуровневая архитектура – клиент – сервер – база данных.

Самый распространенный клиент – браузер.

Клиент – компьютер, телефон, десктопное приложение, софт

Двухуровневая система: клиент - сервер
Трехуровневая архитектура – клиент – сервер – база данных
Многоуровневая архитектура (сервер тоже может быть клиентом и отправлять запросы на другой сервер)
                                                    сервер
Клиент ->  балансировщик ->  сервер -> база данных
                                                    Сервер
(кластер серверов)

Два типа клиентов:
Тонкий клиент – компьютер или программа клиент, которая переносит все или большую часть задач по обработке на сервер (браузер). На клиенте почти нет логики либо она простая.
Толстый клиент – приложение, которое обеспечивает расширенную функциональность логики, независимо от центрального сервера (1С, все онлайн игры)

Веб-сайт – носят информационный характер. Состоят из веб-                      страниц. Имеет простую архитектуру на основе  HTML кода. Платформа для предоставления контента для посетителей. Не предоставляют возможности для взаимодействия с программой.

Веб-приложения – компьютерные приложения для сети интернет. Позволяют пользователю вводить, получать и манипулировать данными. Мб встроены в веб страницы, либо веб-страницы мб приложениями (Facebook, yutoube, email, twitter, VK). Могут не иметь реального информативного содержания (переводчик, мессенджеры)

Веб-сервисы – прикладной программный интерфейс (API), который работает на сервере и предоставляет клиенту данные через HTTP. Позволяет различным веб-приложениям взаимодействовать между собой.


2) Что такое HTTP и HTTPS

НТТР протокол – набор правил передачи информации. Протокол передачи гипертекста. Последняя версия – 2.0. Протокол прикладного уровня.

При передаче запроса от клиента к серверу есть промежуточные узлы (proxy)



Состав НТТР протокола:
1. основная часть (payload) / полезная нагрузка.
2. служебная информация (headers – заголовки). Описывается, как должна передаваться основная часть

НТТР запрос: метод/версия протокола
                       headers
GET/http/1.1

HTTP ответ:
Версия протокола/статус-код/статус-месседж
                      headers
http/1.1.                  200.              ok

HTTPS – зашифрованная версия НТТР протокола. Использует протокол TLS (протокол защиты транспортного уровня). Безопасный обмен 
данными с сервером (банковские операции и онлайн покупки). 
- сохранение приватности (с помощью шифрования данных)
- целостность (хэш функция защищает передаваемые данные от изменений)
аутентификация (сертификаты подтверждают, что владелец ключа именно тот, за кого он себя выдает)


3) HTTP методы

Методы НТТР запросов указывают, какое действие выполнится для этого ресурса.
Это короткое английское слово, записанное заглавными буквами. Название метода чувствительно к регистру

Get, post, put, delite, connect, options

GET, HEAD, OPTIONS, TRACE – безопасные методы

GET – запрос информации от сервера. Только извлекают данные. У этого метода сервер игнорирует тело в отличии от POST
POST – отправка данных к определенному ресурсу (картинки, текст, логин, пароль). В запросе всегда есть тело
PUT - отправляет новое тело и заменяет старое тело c информацией не сервере
Delite – удаление данных с сервера
OPTIONS – описание параметров соединения с сервером, какие-то настройки
СONNECT - устанавливает туннель до определенного ресурса на сервере
HEAD - отправляем, чтобы получить что то с сервера, но в ответ придет только заголовок без тела

4) HTTP статус коды сервера

Статус- код характеризует успешность запроса на сервер

1хх – информационное сообщение
2хх – информационное сообщение
3хх – сообщение о перенаправлении
4хх – ошибки на стороне клиента
5хх – ошибки на стороне сервера

200 – ок
301 – клиент обратился к странице, но она находится по новому адресу и сервер перенаправил на нее
304 – код not modified – информация хранится в кэше
400 – запрос не смог быть обработан сервером, тк составлен неверно
401 – введен неправильный логин и пароль
403 – есть ограничения, не хватает прав, чтобы зайти на ресурс
404 – клиент обращается к ресурсу, которого уже нет на сервере
405 – метод запроса известен, но не применим к конкретному ресурсу
500 -  критическая ошибка. Фатальная ошибка на сервере
501 – серверу неизвестен метод запроса
503 - сервис временно недоступен; сервер не может выполнять запросы.
504  — время ожидания ответа от сервера истекло.


5) Что такое движок браузера 

Браузерный движок – это специальная программа, которая работает с веб-страницами. Он обрабатывает загруженную из интернета HTML-страницу, 
и преобразует ее код в привычное для пользователей представление. 
Движки интернет-браузеров используются в самих браузерах, а также в почтовых клиентах.

6) Какие движки  используют браузеры

Trident разработан Microsoft для Internet Explorer. С выходом Windows 10 платформа Trident эволюционировала в EdgeHTML.

Браузер на движке Presto - более не используется.Opera перешла на движок Blink.
Движок с открытым кодом KHTML, разработанный в рамках KDE, послужил основой для WebKit.

На основе WebKit был создан веб-обозреватель Safari, используемый по умолчанию в iOS-устройствах и лидер по известности среди браузеров – Google Chrome

Движок с открытым кодом Gecko разработан Mozilla Foundation.


7) Что такое API

Это интерфейс, через который происходит взаимодействие клиента с сервером ,сервера и бд, между приложениями. Способ взаимодействия одной системы 
с другой. Контракт, который указывает, как к программе можно обращаться

Интеграционные тестирование происходит на уровне API


- Локальный API позволяет взаимодействовать элементам одной системы между собой.
Удаленный API (remote) позволяет связывать между собой несколько систем (SOAP, REST)

Архитектуру приложения можно выстраивать по-разному. Самые распространенные архитектурные стили — по SOAP и REST

REST - передача самоописываемого состояния. Не применяются жесткие правила. Запись информации в удобном формате. Не правилозависим. 
Поддерживает различые форматы, в отличии от SOAP. Работает только в HTTP (S)

SOAP - простой протокол доступа к объектам. Использует для обмена произвольными сообщениями в XML.  

Составляющие API:
точка входа (URL)
Вызов операции (метод POST, GET)
Данные на вход (HTTP request)
Данные на выход (HTTP response)

Работа с API (способы вызова API):
Напрямую
Система вызывает функции внутри себя (в локальном АРI)
Система 1 вызывает метод другой системы 
Вызов метода человеком 

Косвенно:
Пользователь работает с GUI


8. Что такое Endpoint

Эндпоинт (Endpoint - конечная точка) — это само обращение к маршруту отдельным HTTP методом. Некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом. Простыми словами, это адрес, на который отправляются сообщения.
Конечные точки указывают, как получить доступ к ресурсу, а метод указывает разрешенные взаимодействия (такие как GET, POST или DELETE) с ресурсом.
Эндпоинты работают вместе с методами API. Это определенные URL-адреса, которые приложение использует для связи со сторонними службами и своими пользователями. URL — это роут, который может обрабатывать разные методы запроса. Каждый тип запроса — это отдельный эндпоинт. Существует пять основных типов:
GET — получает информацию с сервера, не требует тела запроса;
POST — создает в базе новый объект, требует тело запроса с полями этого объекта;
PUT — полностью обновляет конкретный объект в базе данных;
PATCH — аналогично PUT, обновляет определенный объект в базе данных, но обновляет только те поля, которые указаны в теле запроса;
DELETE — удаляет объект из базы данных.

Когда мы описываем конечную точку, мы указываем только конечный путь (отсюда и термин «конечная точка»). Полный путь, который содержит как базовый путь, так и конечную точку, часто называют URL-адресом ресурса.


9) URL (URI, URL, URN)

URL – уникальный адрес сайта в сети, который определяет его местонахождение в сети интернет

URN – неизменяемая последовательность символов, определяющая только имя некоторого ресурса. Это имя определяет название ресурса, но не говорит, как к нему подключаться

URI – обобщенное понятие множества идентификации нашего ресурса. Включает URL и URI (вместе или по отдельности)


10) Идемпотентные HTTP методы

- Метод является индемпотентным, если повторение второго и последующих запросов имеет один и тот же результат, не изменяющий состояние сервера
- все безопасные методы являются идемпотентными
- Get, HEAD, OPTIONS, TRACE, PUT, DELITE - идемпотентные

11) Безопасные HTTP методы

1. не вызывают изменения сервера
2. режим “read only” (операции только чтение)
3. GET, HEAD, OPTIONS, TRACE – безопасные методы

12) Иденфикация, Аутентификация, Авторизация

Когда клиент делает запрос на сервер, после ввода логина и пароля, сервер обращается в базу данных. 
Сначала происходит идентификация – SQL запрос сервера в базу данных о соответствии введенного логина существующему в базе данных
Затем аутентификация – соответствие введенного пароля существующему в базе данных.
Авторизация после идентификации и аутентификации. База отправляет информацию по конкретному человеку на сервер
И сервер отдает клиенту личную страницу пользователя.

13) Что такое IP

IP – уникальный сетевой адрес узла (хоста) в компьютерной сети, построенный по протоколу IP. Уникальный номер каждого устройства в сети интернет. 
Хост - это любое устройство в сети, которое имеет интерфейс (сетевая карта в компьютере)

Протокол IP имеет две версии: 4 и 6
IP адрес – 32 битовое или 128 битовое двоичное число. Чаще их видят в виде десятичных чисел. Число не может быть больше 255. Чтобы перевести десятичные числа в двоичные, делим каждое число на 2 и записывает остаток от деления, затем результат деления записывается с конца. Есть онлайн конвертеры.
Маска задает размер сети 
Маска подсети – нужна для определения границ подсети. Это тоже 32 бита

IP адрес бывает статический и динамический (назначается автоматически при подключении устройства к сети и используется в течении ограниченного промежутка времени до завершения сеанса подключения)

MAC адрес – физический адрес нашего устройства. Прописывается при производстве сетевой карты. Мак адресов столько в системе, сколько сетевых карт установлено в оборудовании, которое принадлежит к этой системе

14) Что такое октеты в DNS

DNS – система доменных имен. Каждому цифровому IP адресу присваивается понятное буквенное имя (домен). С помощью DNS информация в буквенном значении переводится в IP адрес. Система DNS позволяет найти IP адрес по доменному имени сайта, она соотносит привычный адрес сайта с IP адресом сервера и сообщает адрес браузеру.

Структура DNS пакета:
Заголовок
Секция запросов
Секция ответа
Секция ответа об уполномоченных серверах
Секция ответа дополнительных записей

Header — Заголовок DNS пакета, состоящий из 12 октет.
Структура доменного имени:
Имя компьютера (www, maps) . Домен второго уровня (Google, yandex). Домен верхнего уровня (ru, uk, com) . Корневой домен (точка в конце)

15) Что такое порт, сколько портов у Linux сервера

Порт - идентификатор получателя (условный номер программы или приложения), на который приходит ответ от сервера. Номер порта находится в конце IP адреса (433, 8080)
Порт - работа на прикладном уровне

IP адрес вместе с портом - сокет. Общение компьютеров на уровне приложений - общение на уровне сокетов

Все порты разделены на три диапазона — общеизвестные (или системные, 0—1023), зарегистрированные (или пользовательские, 1024—49151) и динамические (или частные, 49152—65535).
80 - порт для HTTP
443 HTTPS
22 - Ssh

16) Уровни OSI и TCP/IP

Сетевая модель OSI  - схема, которая организует процесс работы сети
Уровни:
Физический. Единица нагрузки - бит. Кабели, сетевые адаптеры
Канальный. Появляется адресация. Адресом является МАС адрес. Коммутаторы, драйвер сетевого адаптера
Сетевой. Адресация проходит по IP адресам, состоящим из 32 бит. На этом уровне работают маршрутизаторы
Транспортный. TCP, UDP протоколы. Отвечают за прямую связь между приложениями и за надежность доставки информации.
TCP - при передачи файлов происходит гарантия того, что информация доходит до нашего клиента. Если нет - отправляется повторный запрос (почтовые сервисы). Соединение между клиентом и сервером до начала передачи данных
UDP - не нужно убеждаться, что информация дошла. Работает с большей скоростью (онлайн игры)
Сеансовый. Управляет сеансом связи, обменом информации, правами. Протоколы - L2TP, PPTP.
Представительский. Преставление и шифрование данных. JPEG, ASCII, MPEG.
Прикладной. На нем выполняются все высокоуровненвые протоколы (POP, PING, NTP, HTTP, FTP и т.д.) Протоколы здесь не должны задумываться о маршрутизации или гарантии доставки информации - этим занимаются нижестоящие уровни. На 7 уровне необходима лишь реализации конкретных действий, например получение html-кода или email-сообщения конкретному адресату.

Уровни TCP/IP модели:
Канальный. Уровень сетевых интерфейсов (оптоволокно)
Сетевой (передача сетевых сигналов в виде битов и байтов). Маска подсети и протокол IP
 Транспортный ( TCP, UDP протоколы)
 Прикладной 

17) Хедеры http запросов

Можно разделить на 4 группы:
Основные заголовки
Заголовки запроса
Заголовки ответа
Кастомные
Основные заголовки (General)
URL запроса
Метод
Статус -код
Remote address
Referrer policy

Заголовки запроса (request headers)
Host
User agent (клиент, который отправлял запрос)
Accept - дает информацию серверу, какие типы контента мы готовы от него получить
Accept Encoding (разрешенное кодирование) - когда мы делаем запрос, мы получаем сжатую информацию в заархивированном виде. В этом заголовке передается, как сервер может заархивировать информацию
Connection - говорит серверу, хотим ли мы продолжить соединение с сервером после получения информации
Content Type - в каком виде информацию в ответ мы хотим получить (text/xml, application/json)

Заголовки ответа (response headers)
Структура заголовков похожа на клиентскую. 
Различают:
Общие заголовки (General headers)
Заголовки ответа (Response headers)
Заголовки сущности (Entity headers)

Примеры заголовков:
Date — дата и время создания ответа от сервера.
Server — какое ПО использует сервер, чтобы обработать запрос и сформировать ответ.
Last-modified — дата и время последнего изменения ресурса на сервере.
Content-Type — тип данных в ответе.

Кастомные заголовки расширяют возможности протокола
Они всегда начинаются с буквы x -
